// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: internal/nanny/assigner/assigner.proto

package assigner

import (
	nanny "github.com/ServiceWeaver/weaver-gke/internal/nanny"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReplicaSetState stores information about a Kubernetes ReplicaSet, i.e.,
// a set of pods that host the same set of components.
type ReplicaSetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaSet *nanny.ReplicaSet `protobuf:"bytes,1,opt,name=replica_set,json=replicaSet,proto3" json:"replica_set,omitempty"`
	// Routing assignments for all components that use routing/sharding, keyed
	// by component name.
	RoutingAssignments map[string]*Assignment `protobuf:"bytes,2,rep,name=routing_assignments,json=routingAssignments,proto3" json:"routing_assignments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReplicaSetState) Reset() {
	*x = ReplicaSetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSetState) ProtoMessage() {}

func (x *ReplicaSetState) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSetState.ProtoReflect.Descriptor instead.
func (*ReplicaSetState) Descriptor() ([]byte, []int) {
	return file_internal_nanny_assigner_assigner_proto_rawDescGZIP(), []int{0}
}

func (x *ReplicaSetState) GetReplicaSet() *nanny.ReplicaSet {
	if x != nil {
		return x.ReplicaSet
	}
	return nil
}

func (x *ReplicaSetState) GetRoutingAssignments() map[string]*Assignment {
	if x != nil {
		return x.RoutingAssignments
	}
	return nil
}

// Assignment is a wrapper class that creates and decodes assignment protos.
type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            uint64           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Slices             []*Slice         `protobuf:"bytes,2,rep,name=slices,proto3" json:"slices,omitempty"`
	CandidateResources map[string]bool  `protobuf:"bytes,3,rep,name=candidate_resources,json=candidateResources,proto3" json:"candidate_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Constraints        *AlgoConstraints `protobuf:"bytes,4,opt,name=constraints,proto3" json:"constraints,omitempty"`
	Stats              *Statistics      `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_internal_nanny_assigner_assigner_proto_rawDescGZIP(), []int{1}
}

func (x *Assignment) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Assignment) GetSlices() []*Slice {
	if x != nil {
		return x.Slices
	}
	return nil
}

func (x *Assignment) GetCandidateResources() map[string]bool {
	if x != nil {
		return x.CandidateResources
	}
	return nil
}

func (x *Assignment) GetConstraints() *AlgoConstraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *Assignment) GetStats() *Statistics {
	if x != nil {
		return x.Stats
	}
	return nil
}

// SliceKey is an abstraction for routing keys used in slices.
type SliceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val uint64 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *SliceKey) Reset() {
	*x = SliceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceKey) ProtoMessage() {}

func (x *SliceKey) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceKey.ProtoReflect.Descriptor instead.
func (*SliceKey) Descriptor() ([]byte, []int) {
	return file_internal_nanny_assigner_assigner_proto_rawDescGZIP(), []int{2}
}

func (x *SliceKey) GetVal() uint64 {
	if x != nil {
		return x.Val
	}
	return 0
}

// Slice contains the allocation of a routing key range to a set of resources.
//
// The range covers [startInclusive, endExclusive).
type Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartInclusive *SliceKey    `protobuf:"bytes,1,opt,name=start_inclusive,json=startInclusive,proto3" json:"start_inclusive,omitempty"`
	EndExclusive   *SliceKey    `protobuf:"bytes,2,opt,name=end_exclusive,json=endExclusive,proto3" json:"end_exclusive,omitempty"`
	LoadInfo       *LoadTracker `protobuf:"bytes,3,opt,name=load_info,json=loadInfo,proto3" json:"load_info,omitempty"`
}

func (x *Slice) Reset() {
	*x = Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slice) ProtoMessage() {}

func (x *Slice) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slice.ProtoReflect.Descriptor instead.
func (*Slice) Descriptor() ([]byte, []int) {
	return file_internal_nanny_assigner_assigner_proto_rawDescGZIP(), []int{3}
}

func (x *Slice) GetStartInclusive() *SliceKey {
	if x != nil {
		return x.StartInclusive
	}
	return nil
}

func (x *Slice) GetEndExclusive() *SliceKey {
	if x != nil {
		return x.EndExclusive
	}
	return nil
}

func (x *Slice) GetLoadInfo() *LoadTracker {
	if x != nil {
		return x.LoadInfo
	}
	return nil
}

// loadTracker tracks load information for a given slice across all the assigned
// resources.
//
// Note that for a replicated slice (len(resources) > 1):
//   - perResourceload contains the total load as reported by the latest resource
//     that has the slice assigned
//   - distribution contains the load distribution along split points for the
//     given replica
//
// Most of the slices will have a single replica; ideally, only hot keys should
// be replicated. Given that our load metric is req/s it is fair to assume that
// the load is evenly distributed across the replicas of a slice, hence the
// load, and the load distribution for a given replica should be representative
// for all replicas. Otherwise, it is challenging for the weavelets to report
// exactly the same split points for all replicas, and challenging for the
// assigner to compute split points that make sense across all replicas.
//
// TODO(rgrandl): mwhittaker@ has an interesting idea. Instead of taking the
// latest load report, we take the load report with the largest number of
// requests received. That way if a resource was down for some reason or lagging
// behind in an assignment and reports an almost empty load report, we won't use
// it.
//
// TODO(rgrandl): revisit these decisions if we ever decide to support a
// different load metric.
type LoadTracker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Slice load on a given resource.
	PerResourceLoad float64 `protobuf:"fixed64,1,opt,name=per_resource_load,json=perResourceLoad,proto3" json:"per_resource_load,omitempty"`
	// Resources to which the slice is assigned.
	Resources map[string]bool `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Distribution of the load along split points.
	Distribution map[uint64]float64 `protobuf:"bytes,3,rep,name=distribution,proto3" json:"distribution,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *LoadTracker) Reset() {
	*x = LoadTracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadTracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTracker) ProtoMessage() {}

func (x *LoadTracker) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTracker.ProtoReflect.Descriptor instead.
func (*LoadTracker) Descriptor() ([]byte, []int) {
	return file_internal_nanny_assigner_assigner_proto_rawDescGZIP(), []int{4}
}

func (x *LoadTracker) GetPerResourceLoad() float64 {
	if x != nil {
		return x.PerResourceLoad
	}
	return 0
}

func (x *LoadTracker) GetResources() map[string]bool {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *LoadTracker) GetDistribution() map[uint64]float64 {
	if x != nil {
		return x.Distribution
	}
	return nil
}

// AlgoConstraints contains various constraints needed by the routing algos to
// generate assignments.
type AlgoConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Upper bound on the load allowed on any resource.
	MaxLoadLimitResource float64 `protobuf:"fixed64,1,opt,name=max_load_limit_resource,json=maxLoadLimitResource,proto3" json:"max_load_limit_resource,omitempty"`
	// Lower bound on the load allowed on any resource.
	MinLoadLimitResource float64 `protobuf:"fixed64,2,opt,name=min_load_limit_resource,json=minLoadLimitResource,proto3" json:"min_load_limit_resource,omitempty"`
	// Any slice with replica load above this threshold should be split to enable
	// the algo to move slices around, in order to provide load balancing
	// guarantees.
	SplitThreshold float64 `protobuf:"fixed64,3,opt,name=split_threshold,json=splitThreshold,proto3" json:"split_threshold,omitempty"`
	// Any slice with replica load above this threshold should be replicated to
	// enable the algo to move slices around, in order to provide load balancing
	// guarantees.
	//
	// In practice, this threshold should be set to a value equal to or higher
	// than the splitThreshold, because it is preferred for a slice to be split
	// first.
	//
	// Also, a good algorithm should replicate a slice iff the slice has a single
	// key; otherwise splitting is always preferred because it incurs less churn.
	ReplicateThreshold float64 `protobuf:"fixed64,4,opt,name=replicate_threshold,json=replicateThreshold,proto3" json:"replicate_threshold,omitempty"`
	// Any slice with replica load below this threshold should be dereplicated if
	// the number of replicas is greater than 1.
	//
	// Dereplication creates more opportunities for merging slices, hence
	// controlling the assignment size.
	DereplicateThreshold float64 `protobuf:"fixed64,5,opt,name=dereplicate_threshold,json=dereplicateThreshold,proto3" json:"dereplicate_threshold,omitempty"`
	// Maximum number of slices a resource should be assigned in a given
	// assignment. Note that this is just a hint, because in reality the algorithm
	// might not be able to provide a hard guarantee.
	//
	// The role of this constraint is to ensure that the number of slices in an
	// assignment is bounded.
	MaxNumSlicesResourceHint int64 `protobuf:"varint,6,opt,name=max_num_slices_resource_hint,json=maxNumSlicesResourceHint,proto3" json:"max_num_slices_resource_hint,omitempty"`
}

func (x *AlgoConstraints) Reset() {
	*x = AlgoConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgoConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoConstraints) ProtoMessage() {}

func (x *AlgoConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoConstraints.ProtoReflect.Descriptor instead.
func (*AlgoConstraints) Descriptor() ([]byte, []int) {
	return file_internal_nanny_assigner_assigner_proto_rawDescGZIP(), []int{5}
}

func (x *AlgoConstraints) GetMaxLoadLimitResource() float64 {
	if x != nil {
		return x.MaxLoadLimitResource
	}
	return 0
}

func (x *AlgoConstraints) GetMinLoadLimitResource() float64 {
	if x != nil {
		return x.MinLoadLimitResource
	}
	return 0
}

func (x *AlgoConstraints) GetSplitThreshold() float64 {
	if x != nil {
		return x.SplitThreshold
	}
	return 0
}

func (x *AlgoConstraints) GetReplicateThreshold() float64 {
	if x != nil {
		return x.ReplicateThreshold
	}
	return 0
}

func (x *AlgoConstraints) GetDereplicateThreshold() float64 {
	if x != nil {
		return x.DereplicateThreshold
	}
	return 0
}

func (x *AlgoConstraints) GetMaxNumSlicesResourceHint() int64 {
	if x != nil {
		return x.MaxNumSlicesResourceHint
	}
	return 0
}

// Statistics contains various statistics for a given assignment.
type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SplitOps              int64 `protobuf:"varint,1,opt,name=splitOps,proto3" json:"splitOps,omitempty"`
	MergeOps              int64 `protobuf:"varint,2,opt,name=mergeOps,proto3" json:"mergeOps,omitempty"`
	ReplicateOps          int64 `protobuf:"varint,3,opt,name=replicateOps,proto3" json:"replicateOps,omitempty"`
	DereplicateOps        int64 `protobuf:"varint,4,opt,name=dereplicateOps,proto3" json:"dereplicateOps,omitempty"`
	MoveDueToBalanceOps   int64 `protobuf:"varint,5,opt,name=moveDueToBalanceOps,proto3" json:"moveDueToBalanceOps,omitempty"`
	MoveDueToUnhealthyOps int64 `protobuf:"varint,6,opt,name=moveDueToUnhealthyOps,proto3" json:"moveDueToUnhealthyOps,omitempty"`
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_assigner_assigner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_internal_nanny_assigner_assigner_proto_rawDescGZIP(), []int{6}
}

func (x *Statistics) GetSplitOps() int64 {
	if x != nil {
		return x.SplitOps
	}
	return 0
}

func (x *Statistics) GetMergeOps() int64 {
	if x != nil {
		return x.MergeOps
	}
	return 0
}

func (x *Statistics) GetReplicateOps() int64 {
	if x != nil {
		return x.ReplicateOps
	}
	return 0
}

func (x *Statistics) GetDereplicateOps() int64 {
	if x != nil {
		return x.DereplicateOps
	}
	return 0
}

func (x *Statistics) GetMoveDueToBalanceOps() int64 {
	if x != nil {
		return x.MoveDueToBalanceOps
	}
	return 0
}

func (x *Statistics) GetMoveDueToUnhealthyOps() int64 {
	if x != nil {
		return x.MoveDueToUnhealthyOps
	}
	return 0
}

var File_internal_nanny_assigner_assigner_proto protoreflect.FileDescriptor

var file_internal_nanny_assigner_assigner_proto_rawDesc = []byte{
	0x0a, 0x26, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6e, 0x61, 0x6e, 0x6e, 0x79,
	0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x1a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6e, 0x61, 0x6e,
	0x6e, 0x79, 0x2f, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86,
	0x02, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x5b, 0x0a, 0x17, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x02, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x1a, 0x45, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1c, 0x0a, 0x08, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x05, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc9, 0x02, 0x0a, 0x0b, 0x4c,
	0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x02, 0x0a, 0x0f, 0x41, 0x6c, 0x67, 0x6f, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x78,
	0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4f,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4f,
	0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x75, 0x65,
	0x54, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x15,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x4f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x4f,
	0x70, 0x73, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x61, 0x76, 0x65, 0x72, 0x2f, 0x77,
	0x65, 0x61, 0x76, 0x65, 0x72, 0x2d, 0x67, 0x6b, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_nanny_assigner_assigner_proto_rawDescOnce sync.Once
	file_internal_nanny_assigner_assigner_proto_rawDescData = file_internal_nanny_assigner_assigner_proto_rawDesc
)

func file_internal_nanny_assigner_assigner_proto_rawDescGZIP() []byte {
	file_internal_nanny_assigner_assigner_proto_rawDescOnce.Do(func() {
		file_internal_nanny_assigner_assigner_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_nanny_assigner_assigner_proto_rawDescData)
	})
	return file_internal_nanny_assigner_assigner_proto_rawDescData
}

var file_internal_nanny_assigner_assigner_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_internal_nanny_assigner_assigner_proto_goTypes = []interface{}{
	(*ReplicaSetState)(nil),  // 0: assigner.ReplicaSetState
	(*Assignment)(nil),       // 1: assigner.Assignment
	(*SliceKey)(nil),         // 2: assigner.SliceKey
	(*Slice)(nil),            // 3: assigner.Slice
	(*LoadTracker)(nil),      // 4: assigner.LoadTracker
	(*AlgoConstraints)(nil),  // 5: assigner.AlgoConstraints
	(*Statistics)(nil),       // 6: assigner.Statistics
	nil,                      // 7: assigner.ReplicaSetState.RoutingAssignmentsEntry
	nil,                      // 8: assigner.Assignment.CandidateResourcesEntry
	nil,                      // 9: assigner.LoadTracker.ResourcesEntry
	nil,                      // 10: assigner.LoadTracker.DistributionEntry
	(*nanny.ReplicaSet)(nil), // 11: nanny.ReplicaSet
}
var file_internal_nanny_assigner_assigner_proto_depIdxs = []int32{
	11, // 0: assigner.ReplicaSetState.replica_set:type_name -> nanny.ReplicaSet
	7,  // 1: assigner.ReplicaSetState.routing_assignments:type_name -> assigner.ReplicaSetState.RoutingAssignmentsEntry
	3,  // 2: assigner.Assignment.slices:type_name -> assigner.Slice
	8,  // 3: assigner.Assignment.candidate_resources:type_name -> assigner.Assignment.CandidateResourcesEntry
	5,  // 4: assigner.Assignment.constraints:type_name -> assigner.AlgoConstraints
	6,  // 5: assigner.Assignment.stats:type_name -> assigner.Statistics
	2,  // 6: assigner.Slice.start_inclusive:type_name -> assigner.SliceKey
	2,  // 7: assigner.Slice.end_exclusive:type_name -> assigner.SliceKey
	4,  // 8: assigner.Slice.load_info:type_name -> assigner.LoadTracker
	9,  // 9: assigner.LoadTracker.resources:type_name -> assigner.LoadTracker.ResourcesEntry
	10, // 10: assigner.LoadTracker.distribution:type_name -> assigner.LoadTracker.DistributionEntry
	1,  // 11: assigner.ReplicaSetState.RoutingAssignmentsEntry.value:type_name -> assigner.Assignment
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_internal_nanny_assigner_assigner_proto_init() }
func file_internal_nanny_assigner_assigner_proto_init() {
	if File_internal_nanny_assigner_assigner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_nanny_assigner_assigner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_assigner_assigner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_assigner_assigner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_assigner_assigner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_assigner_assigner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadTracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_assigner_assigner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgoConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_assigner_assigner_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_nanny_assigner_assigner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_nanny_assigner_assigner_proto_goTypes,
		DependencyIndexes: file_internal_nanny_assigner_assigner_proto_depIdxs,
		MessageInfos:      file_internal_nanny_assigner_assigner_proto_msgTypes,
	}.Build()
	File_internal_nanny_assigner_assigner_proto = out.File
	file_internal_nanny_assigner_assigner_proto_rawDesc = nil
	file_internal_nanny_assigner_assigner_proto_goTypes = nil
	file_internal_nanny_assigner_assigner_proto_depIdxs = nil
}
