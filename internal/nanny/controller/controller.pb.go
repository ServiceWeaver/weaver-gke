// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: internal/nanny/controller/controller.proto

package controller

import (
	config "github.com/ServiceWeaver/weaver-gke/internal/config"
	nanny "github.com/ServiceWeaver/weaver-gke/internal/nanny"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AppVersionDistributorStatus specifies the latest status for a particular
// distributor in a given application version.
type AppVersionDistributorStatus int32

const (
	AppVersionDistributorStatus_UNKNOWN     AppVersionDistributorStatus = 0
	AppVersionDistributorStatus_STARTING    AppVersionDistributorStatus = 1
	AppVersionDistributorStatus_ROLLING_OUT AppVersionDistributorStatus = 2
	AppVersionDistributorStatus_ROLLED_OUT  AppVersionDistributorStatus = 3
	AppVersionDistributorStatus_DELETING    AppVersionDistributorStatus = 4
	AppVersionDistributorStatus_DELETED     AppVersionDistributorStatus = 5
)

// Enum value maps for AppVersionDistributorStatus.
var (
	AppVersionDistributorStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "STARTING",
		2: "ROLLING_OUT",
		3: "ROLLED_OUT",
		4: "DELETING",
		5: "DELETED",
	}
	AppVersionDistributorStatus_value = map[string]int32{
		"UNKNOWN":     0,
		"STARTING":    1,
		"ROLLING_OUT": 2,
		"ROLLED_OUT":  3,
		"DELETING":    4,
		"DELETED":     5,
	}
)

func (x AppVersionDistributorStatus) Enum() *AppVersionDistributorStatus {
	p := new(AppVersionDistributorStatus)
	*p = x
	return p
}

func (x AppVersionDistributorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionDistributorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_nanny_controller_controller_proto_enumTypes[0].Descriptor()
}

func (AppVersionDistributorStatus) Type() protoreflect.EnumType {
	return &file_internal_nanny_controller_controller_proto_enumTypes[0]
}

func (x AppVersionDistributorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionDistributorStatus.Descriptor instead.
func (AppVersionDistributorStatus) EnumDescriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{0}
}

type AppVersionStatus_Status int32

const (
	AppVersionStatus_UNKNOWN     AppVersionStatus_Status = 0
	AppVersionStatus_ROLLING_OUT AppVersionStatus_Status = 1 // the version is rolling out
	AppVersionStatus_ACTIVE      AppVersionStatus_Status = 2 // the version has been fully rolled out
	AppVersionStatus_DELETING    AppVersionStatus_Status = 3 // the version is being deleted
)

// Enum value maps for AppVersionStatus_Status.
var (
	AppVersionStatus_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "ROLLING_OUT",
		2: "ACTIVE",
		3: "DELETING",
	}
	AppVersionStatus_Status_value = map[string]int32{
		"UNKNOWN":     0,
		"ROLLING_OUT": 1,
		"ACTIVE":      2,
		"DELETING":    3,
	}
)

func (x AppVersionStatus_Status) Enum() *AppVersionStatus_Status {
	p := new(AppVersionStatus_Status)
	*p = x
	return p
}

func (x AppVersionStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_nanny_controller_controller_proto_enumTypes[1].Descriptor()
}

func (AppVersionStatus_Status) Type() protoreflect.EnumType {
	return &file_internal_nanny_controller_controller_proto_enumTypes[1]
}

func (x AppVersionStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionStatus_Status.Descriptor instead.
func (AppVersionStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{11, 0}
}

// RolloutRequest is a request to the controller to roll out a new application
// version across a number of deploying locations.
type RolloutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deployment information for the application.
	Config *config.GKEConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// A list of locations to rollout the application to.
	Locations []*RolloutRequest_Location `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *RolloutRequest) Reset() {
	*x = RolloutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutRequest) ProtoMessage() {}

func (x *RolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutRequest.ProtoReflect.Descriptor instead.
func (*RolloutRequest) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{0}
}

func (x *RolloutRequest) GetConfig() *config.GKEConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RolloutRequest) GetLocations() []*RolloutRequest_Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

// AppState contains the state managed for each application by the controller.
type AppState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Application versions, keyed by version id.
	Versions map[string]*AppVersionState `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AppState) Reset() {
	*x = AppState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppState) ProtoMessage() {}

func (x *AppState) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppState.ProtoReflect.Descriptor instead.
func (*AppState) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{1}
}

func (x *AppState) GetVersions() map[string]*AppVersionState {
	if x != nil {
		return x.Versions
	}
	return nil
}

// AppVersionState contains the state managed for each application version by
// the controller.
type AppVersionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config          *config.GKEConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	RolloutStrategy *RolloutStrategy  `protobuf:"bytes,2,opt,name=rollout_strategy,json=rolloutStrategy,proto3" json:"rollout_strategy,omitempty"`
	// Distributors state for a given application version.
	Distributors map[string]*AppVersionDistributorState `protobuf:"bytes,4,rep,name=distributors,proto3" json:"distributors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Unique identifier that captures the order in which the application version
	// was submitted for rollout at the controller.
	SubmissionId int64 `protobuf:"varint,5,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	// The time when the application version was submitted to the controller.
	SubmissionTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=submission_time,json=submissionTime,proto3" json:"submission_time,omitempty"`
	// The wave idx that has been rolling out.
	WaveIdx int64 `protobuf:"varint,6,opt,name=wave_idx,json=waveIdx,proto3" json:"wave_idx,omitempty"`
	// The time when the current wave was started, or nil if rollout is done
	// (i.e., wave_idx equals the number of waves).
	TimeWaveStarted *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=time_wave_started,json=timeWaveStarted,proto3" json:"time_wave_started,omitempty"`
	// The time when the wave was successfully rolled out.
	TimeWaveRolledOut *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=time_wave_rolled_out,json=timeWaveRolledOut,proto3" json:"time_wave_rolled_out,omitempty"`
}

func (x *AppVersionState) Reset() {
	*x = AppVersionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionState) ProtoMessage() {}

func (x *AppVersionState) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionState.ProtoReflect.Descriptor instead.
func (*AppVersionState) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{2}
}

func (x *AppVersionState) GetConfig() *config.GKEConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AppVersionState) GetRolloutStrategy() *RolloutStrategy {
	if x != nil {
		return x.RolloutStrategy
	}
	return nil
}

func (x *AppVersionState) GetDistributors() map[string]*AppVersionDistributorState {
	if x != nil {
		return x.Distributors
	}
	return nil
}

func (x *AppVersionState) GetSubmissionId() int64 {
	if x != nil {
		return x.SubmissionId
	}
	return 0
}

func (x *AppVersionState) GetSubmissionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmissionTime
	}
	return nil
}

func (x *AppVersionState) GetWaveIdx() int64 {
	if x != nil {
		return x.WaveIdx
	}
	return 0
}

func (x *AppVersionState) GetTimeWaveStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeWaveStarted
	}
	return nil
}

func (x *AppVersionState) GetTimeWaveRolledOut() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeWaveRolledOut
	}
	return nil
}

// AppVersionDistributorState contains the state for a particular distributor
// in charge of managing an application version.
type AppVersionDistributorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaveIdx int64                       `protobuf:"varint,1,opt,name=wave_idx,json=waveIdx,proto3" json:"wave_idx,omitempty"`
	Status  AppVersionDistributorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=controller.AppVersionDistributorStatus" json:"status,omitempty"`
	// All running Kubernetes ReplicaSets for this application version at the
	// distributor.
	ReplicaSets *nanny.ReplicaSetState `protobuf:"bytes,3,opt,name=replica_sets,json=replicaSets,proto3" json:"replica_sets,omitempty"`
}

func (x *AppVersionDistributorState) Reset() {
	*x = AppVersionDistributorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionDistributorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionDistributorState) ProtoMessage() {}

func (x *AppVersionDistributorState) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionDistributorState.ProtoReflect.Descriptor instead.
func (*AppVersionDistributorState) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{3}
}

func (x *AppVersionDistributorState) GetWaveIdx() int64 {
	if x != nil {
		return x.WaveIdx
	}
	return 0
}

func (x *AppVersionDistributorState) GetStatus() AppVersionDistributorStatus {
	if x != nil {
		return x.Status
	}
	return AppVersionDistributorStatus_UNKNOWN
}

func (x *AppVersionDistributorState) GetReplicaSets() *nanny.ReplicaSetState {
	if x != nil {
		return x.ReplicaSets
	}
	return nil
}

// rolloutStrategy contains the strategy for rolling out an application version.
//
// A rollout strategy consists of a number of waves. Each wave consists of a
// number of locations and their assigned traffic fractions.
//
// E.g.,
// Application version X should be rolled out in 8 locations (loc0...loc7)
// Expected duration to complete the rollout is 8h.
// Half of the time should be spent applying traffic and half of the time
// waiting to see whether there are any errors.
//
// A possible rollout strategy is as follows:
//
//   - Allocate 4 waves (i.e, in each wave 1h will be spent applying the traffic
//     function, and 1h will be spent waiting)
//
//   - First wave will contain the canary location (loc0)
//
//   - All other locations will be assigned to the other waves
//
//   - For each location, the target function can be the same and consists of:
//
//   - 4 pairs (duration, trafficFraction)
//
//   - e.g., targetFn: {(15m: 10%), (15m, 25%), (15m, 50%), (15m, 100%)}
//
//   - The rollout strategy will look as follows:
//     wave 0:
//     rollouts: {
//     loc0 : nanny.TargetFn{(15m: 10%), (15m, 25%), (15m, 50%), (15m, 100%)}
//
//     validationTime: 1h
//     }
//     wave 1:
//     rollouts: {
//     loc1 : nanny.TargetFn{(15m: 10%), (15m, 25%), (15m, 50%), (15m, 100%)}
//     loc4 : nanny.TargetFn{(15m: 10%), (15m, 25%), (15m, 50%), (15m, 100%)}
//
//     validationTime: 1h
//     }
//     wave 2:
//     rollouts: {
//     loc2 : nanny.TargetFn{(15m: 10%), (15m, 25%), (15m, 50%), (15m, 100%)}
//     loc5 : nanny.TargetFn{(15m: 10%), (15m, 25%), (15m, 50%), (15m, 100%)}
//
//     validationTime: 1h
//     }
//     wave 3:
//     rollouts: {
//     loc3 : nanny.TargetFn{(15m: 10%), (15m, 25%), (15m, 50%), (15m, 100%)}
//     loc6 : nanny.TargetFn{(15m: 10%), (15m, 25%), (15m, 50%), (15m, 100%)}
//     loc7 : nanny.TargetFn{(15m: 10%), (15m, 25%), (15m, 50%), (15m, 100%)}
//
//     validationTime: 1h
//     }
type RolloutStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Waves []*RolloutWave `protobuf:"bytes,1,rep,name=waves,proto3" json:"waves,omitempty"`
}

func (x *RolloutStrategy) Reset() {
	*x = RolloutStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutStrategy) ProtoMessage() {}

func (x *RolloutStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutStrategy.ProtoReflect.Descriptor instead.
func (*RolloutStrategy) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{4}
}

func (x *RolloutStrategy) GetWaves() []*RolloutWave {
	if x != nil {
		return x.Waves
	}
	return nil
}

// RolloutWave contains per rollout wave information.
type RolloutWave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of traffic target functions, keyed by location.
	TargetFunctions map[string]*nanny.TargetFn `protobuf:"bytes,1,rep,name=target_functions,json=targetFunctions,proto3" json:"target_functions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Time to wait after all the target functions have been applied before
	// declaring the wave as complete.
	WaitTime *durationpb.Duration `protobuf:"bytes,2,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
}

func (x *RolloutWave) Reset() {
	*x = RolloutWave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutWave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutWave) ProtoMessage() {}

func (x *RolloutWave) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutWave.ProtoReflect.Descriptor instead.
func (*RolloutWave) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{5}
}

func (x *RolloutWave) GetTargetFunctions() map[string]*nanny.TargetFn {
	if x != nil {
		return x.TargetFunctions
	}
	return nil
}

func (x *RolloutWave) GetWaitTime() *durationpb.Duration {
	if x != nil {
		return x.WaitTime
	}
	return nil
}

// DistributorState contains the traffic assignment at a given distributor.
type DistributorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Distributor location.
	Location *RolloutRequest_Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Latest traffic assignment for public listeners received from the
	// corresponding distributor.
	TrafficAssignment *nanny.TrafficAssignment `protobuf:"bytes,2,opt,name=traffic_assignment,json=trafficAssignment,proto3" json:"traffic_assignment,omitempty"`
}

func (x *DistributorState) Reset() {
	*x = DistributorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributorState) ProtoMessage() {}

func (x *DistributorState) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributorState.ProtoReflect.Descriptor instead.
func (*DistributorState) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{6}
}

func (x *DistributorState) GetLocation() *RolloutRequest_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DistributorState) GetTrafficAssignment() *nanny.TrafficAssignment {
	if x != nil {
		return x.TrafficAssignment
	}
	return nil
}

// ControllerState contains the state maintained by the controller.
type ControllerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applications map[string]bool              `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Distributors map[string]*DistributorState `protobuf:"bytes,2,rep,name=distributors,proto3" json:"distributors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ControllerState) Reset() {
	*x = ControllerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerState) ProtoMessage() {}

func (x *ControllerState) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerState.ProtoReflect.Descriptor instead.
func (*ControllerState) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{7}
}

func (x *ControllerState) GetApplications() map[string]bool {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *ControllerState) GetDistributors() map[string]*DistributorState {
	if x != nil {
		return x.Distributors
	}
	return nil
}

// StatusRequest is a request to fetch status for a given Service Weaver application
// version.
type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Application whose status should be retrieved. If empty, the status for
	// all known applications is retrieved.
	App string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// Application version whose status should be retrieved. If empty, the status
	// for all known application versions is retrieved.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{8}
}

func (x *StatusRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *StatusRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Status contains basic information about all of the Service Weaver applications.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of every app.
	Apps []*AppStatus `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
	// The current public traffic assignment.
	Traffic *nanny.TrafficAssignment `protobuf:"bytes,2,opt,name=traffic,proto3" json:"traffic,omitempty"`
	// The current private traffic assignments at every location.
	PrivateTraffic []*nanny.TrafficAssignment `protobuf:"bytes,3,rep,name=private_traffic,json=privateTraffic,proto3" json:"private_traffic,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{9}
}

func (x *Status) GetApps() []*AppStatus {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *Status) GetTraffic() *nanny.TrafficAssignment {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *Status) GetPrivateTraffic() []*nanny.TrafficAssignment {
	if x != nil {
		return x.PrivateTraffic
	}
	return nil
}

// AppStatus contains basic information about a given Service Weaver application.
type AppStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The app's name.
	App string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// The status of every version of this app.
	Versions []*AppVersionStatus `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// The rollout schedule of this app.
	ProjectedTraffic *ProjectedTraffic `protobuf:"bytes,3,opt,name=projected_traffic,json=projectedTraffic,proto3" json:"projected_traffic,omitempty"`
}

func (x *AppStatus) Reset() {
	*x = AppStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStatus) ProtoMessage() {}

func (x *AppStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStatus.ProtoReflect.Descriptor instead.
func (*AppStatus) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{10}
}

func (x *AppStatus) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *AppStatus) GetVersions() []*AppVersionStatus {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *AppStatus) GetProjectedTraffic() *ProjectedTraffic {
	if x != nil {
		return x.ProjectedTraffic
	}
	return nil
}

// AppVersionStatus contains basic information about a given Service Weaver
// application version.
type AppVersionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App            string                  `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`                                        // the app name (e.g., collatz)
	Id             string                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                                          // the deployment id (e.g., a83903259a93)
	SubmissionId   int64                   `protobuf:"varint,3,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"` // the unique sequence number (e.g., 0, 1, 2)
	SubmissionTime *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=submission_time,json=submissionTime,proto3" json:"submission_time,omitempty"`
	GkeConfig      *config.GKEConfig       `protobuf:"bytes,5,opt,name=gke_config,json=gkeConfig,proto3" json:"gke_config,omitempty"` // GKE config for this deployment.
	Status         AppVersionStatus_Status `protobuf:"varint,7,opt,name=status,proto3,enum=controller.AppVersionStatus_Status" json:"status,omitempty"`
	ReplicaSets    []*ReplicaSetStatus     `protobuf:"bytes,8,rep,name=replica_sets,json=replicaSets,proto3" json:"replica_sets,omitempty"`
	Listeners      []*ListenerStatus       `protobuf:"bytes,9,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *AppVersionStatus) Reset() {
	*x = AppVersionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionStatus) ProtoMessage() {}

func (x *AppVersionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionStatus.ProtoReflect.Descriptor instead.
func (*AppVersionStatus) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{11}
}

func (x *AppVersionStatus) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *AppVersionStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppVersionStatus) GetSubmissionId() int64 {
	if x != nil {
		return x.SubmissionId
	}
	return 0
}

func (x *AppVersionStatus) GetSubmissionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmissionTime
	}
	return nil
}

func (x *AppVersionStatus) GetGkeConfig() *config.GKEConfig {
	if x != nil {
		return x.GkeConfig
	}
	return nil
}

func (x *AppVersionStatus) GetStatus() AppVersionStatus_Status {
	if x != nil {
		return x.Status
	}
	return AppVersionStatus_UNKNOWN
}

func (x *AppVersionStatus) GetReplicaSets() []*ReplicaSetStatus {
	if x != nil {
		return x.ReplicaSets
	}
	return nil
}

func (x *AppVersionStatus) GetListeners() []*ListenerStatus {
	if x != nil {
		return x.Listeners
	}
	return nil
}

type ReplicaSetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                               // ReplicaSet name
	Location        string   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`                                       // location (e.g., us-east1)
	HealthyReplicas int64    `protobuf:"varint,3,opt,name=healthy_replicas,json=healthyReplicas,proto3" json:"healthy_replicas,omitempty"` // number of healthy replicas
	TotalReplicas   int64    `protobuf:"varint,4,opt,name=total_replicas,json=totalReplicas,proto3" json:"total_replicas,omitempty"`       // number of total replicas
	Components      []string `protobuf:"bytes,5,rep,name=components,proto3" json:"components,omitempty"`                                   // active components
}

func (x *ReplicaSetStatus) Reset() {
	*x = ReplicaSetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSetStatus) ProtoMessage() {}

func (x *ReplicaSetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSetStatus.ProtoReflect.Descriptor instead.
func (*ReplicaSetStatus) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{12}
}

func (x *ReplicaSetStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReplicaSetStatus) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ReplicaSetStatus) GetHealthyReplicas() int64 {
	if x != nil {
		return x.HealthyReplicas
	}
	return 0
}

func (x *ReplicaSetStatus) GetTotalReplicas() int64 {
	if x != nil {
		return x.TotalReplicas
	}
	return 0
}

func (x *ReplicaSetStatus) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

type ListenerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         // listener name
	Public   bool     `protobuf:"varint,2,opt,name=public,proto3" json:"public,omitempty"`    // is the listener public?
	Hostname []string `protobuf:"bytes,3,rep,name=hostname,proto3" json:"hostname,omitempty"` // hostnames the listener is reachable at.
}

func (x *ListenerStatus) Reset() {
	*x = ListenerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerStatus) ProtoMessage() {}

func (x *ListenerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerStatus.ProtoReflect.Descriptor instead.
func (*ListenerStatus) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{13}
}

func (x *ListenerStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListenerStatus) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *ListenerStatus) GetHostname() []string {
	if x != nil {
		return x.Hostname
	}
	return nil
}

// ProjectedTraffic contains the projected traffic assignments for a particular
// application.
type ProjectedTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App         string        `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Projections []*Projection `protobuf:"bytes,2,rep,name=projections,proto3" json:"projections,omitempty"`
}

func (x *ProjectedTraffic) Reset() {
	*x = ProjectedTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectedTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectedTraffic) ProtoMessage() {}

func (x *ProjectedTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectedTraffic.ProtoReflect.Descriptor instead.
func (*ProjectedTraffic) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{14}
}

func (x *ProjectedTraffic) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *ProjectedTraffic) GetProjections() []*Projection {
	if x != nil {
		return x.Projections
	}
	return nil
}

// Projection is the projected traffic assignment at a given point in time.
type Projection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    *timestamppb.Timestamp   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Traffic *nanny.TrafficAssignment `protobuf:"bytes,2,opt,name=traffic,proto3" json:"traffic,omitempty"`
}

func (x *Projection) Reset() {
	*x = Projection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Projection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Projection) ProtoMessage() {}

func (x *Projection) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Projection.ProtoReflect.Descriptor instead.
func (*Projection) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{15}
}

func (x *Projection) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Projection) GetTraffic() *nanny.TrafficAssignment {
	if x != nil {
		return x.Traffic
	}
	return nil
}

// KillRequest is a request to kill every deployment of a Service Weaver application.
type KillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"` // the app to kill
}

func (x *KillRequest) Reset() {
	*x = KillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillRequest) ProtoMessage() {}

func (x *KillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillRequest.ProtoReflect.Descriptor instead.
func (*KillRequest) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{16}
}

func (x *KillRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

// SubmissionId contains a unique, monotonically increasing id that is
// associated with a rollout at the submission time.
type SubmissionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubmissionId) Reset() {
	*x = SubmissionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionId) ProtoMessage() {}

func (x *SubmissionId) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionId.ProtoReflect.Descriptor instead.
func (*SubmissionId) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{17}
}

func (x *SubmissionId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// RolloutRequest_Location stores information about the location where
// the application is being rolled out.
type RolloutRequest_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A descriptive name for the location (e.g., a cloud region).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Address of the distributor that manages traffic for the application.
	DistributorAddr string `protobuf:"bytes,2,opt,name=distributor_addr,json=distributorAddr,proto3" json:"distributor_addr,omitempty"`
}

func (x *RolloutRequest_Location) Reset() {
	*x = RolloutRequest_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nanny_controller_controller_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutRequest_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutRequest_Location) ProtoMessage() {}

func (x *RolloutRequest_Location) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nanny_controller_controller_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutRequest_Location.ProtoReflect.Descriptor instead.
func (*RolloutRequest_Location) Descriptor() ([]byte, []int) {
	return file_internal_nanny_controller_controller_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RolloutRequest_Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RolloutRequest_Location) GetDistributorAddr() string {
	if x != nil {
		return x.DistributorAddr
	}
	return ""
}

var File_internal_nanny_controller_controller_proto protoreflect.FileDescriptor

var file_internal_nanny_controller_controller_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6e, 0x61, 0x6e, 0x6e, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2f, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x47, 0x4b, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x41, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x49, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x22,
	0xa4, 0x01, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x58, 0x0a, 0x0d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x04, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x4b, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0f, 0x72, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x51, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61,
	0x76, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x61,
	0x76, 0x65, 0x49, 0x64, 0x78, 0x12, 0x46, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x61,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x57, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a,
	0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x76,
	0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x1a, 0x67, 0x0a, 0x11, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x61, 0x76, 0x65, 0x49, 0x64, 0x78, 0x12, 0x3f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x0f, 0x52, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x77, 0x61, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x57, 0x61, 0x76, 0x65, 0x52, 0x05, 0x77, 0x61, 0x76, 0x65, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x0b,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x57, 0x61, 0x76, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x57, 0x61, 0x76, 0x65, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x53, 0x0a, 0x14,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x46, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x11, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x32, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x6e,
	0x6e, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x22, 0xa2, 0x01, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22, 0xca, 0x03, 0x0a, 0x10, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x67, 0x6b,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x4b, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x09, 0x67, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x22, 0x40, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x58, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x38, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x70, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22, 0x1f, 0x0a, 0x0b, 0x4b, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x1e, 0x0a, 0x0c, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x74, 0x0a, 0x1b, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05,
	0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x61, 0x76, 0x65, 0x72, 0x2f, 0x77, 0x65, 0x61,
	0x76, 0x65, 0x72, 0x2d, 0x67, 0x6b, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x6e, 0x61, 0x6e, 0x6e, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_nanny_controller_controller_proto_rawDescOnce sync.Once
	file_internal_nanny_controller_controller_proto_rawDescData = file_internal_nanny_controller_controller_proto_rawDesc
)

func file_internal_nanny_controller_controller_proto_rawDescGZIP() []byte {
	file_internal_nanny_controller_controller_proto_rawDescOnce.Do(func() {
		file_internal_nanny_controller_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_nanny_controller_controller_proto_rawDescData)
	})
	return file_internal_nanny_controller_controller_proto_rawDescData
}

var file_internal_nanny_controller_controller_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_internal_nanny_controller_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_internal_nanny_controller_controller_proto_goTypes = []interface{}{
	(AppVersionDistributorStatus)(0),   // 0: controller.AppVersionDistributorStatus
	(AppVersionStatus_Status)(0),       // 1: controller.AppVersionStatus.Status
	(*RolloutRequest)(nil),             // 2: controller.RolloutRequest
	(*AppState)(nil),                   // 3: controller.AppState
	(*AppVersionState)(nil),            // 4: controller.AppVersionState
	(*AppVersionDistributorState)(nil), // 5: controller.AppVersionDistributorState
	(*RolloutStrategy)(nil),            // 6: controller.RolloutStrategy
	(*RolloutWave)(nil),                // 7: controller.RolloutWave
	(*DistributorState)(nil),           // 8: controller.DistributorState
	(*ControllerState)(nil),            // 9: controller.ControllerState
	(*StatusRequest)(nil),              // 10: controller.StatusRequest
	(*Status)(nil),                     // 11: controller.Status
	(*AppStatus)(nil),                  // 12: controller.AppStatus
	(*AppVersionStatus)(nil),           // 13: controller.AppVersionStatus
	(*ReplicaSetStatus)(nil),           // 14: controller.ReplicaSetStatus
	(*ListenerStatus)(nil),             // 15: controller.ListenerStatus
	(*ProjectedTraffic)(nil),           // 16: controller.ProjectedTraffic
	(*Projection)(nil),                 // 17: controller.Projection
	(*KillRequest)(nil),                // 18: controller.KillRequest
	(*SubmissionId)(nil),               // 19: controller.SubmissionId
	(*RolloutRequest_Location)(nil),    // 20: controller.RolloutRequest.Location
	nil,                                // 21: controller.AppState.VersionsEntry
	nil,                                // 22: controller.AppVersionState.DistributorsEntry
	nil,                                // 23: controller.RolloutWave.TargetFunctionsEntry
	nil,                                // 24: controller.ControllerState.ApplicationsEntry
	nil,                                // 25: controller.ControllerState.DistributorsEntry
	(*config.GKEConfig)(nil),           // 26: config.GKEConfig
	(*timestamppb.Timestamp)(nil),      // 27: google.protobuf.Timestamp
	(*nanny.ReplicaSetState)(nil),      // 28: nanny.ReplicaSetState
	(*durationpb.Duration)(nil),        // 29: google.protobuf.Duration
	(*nanny.TrafficAssignment)(nil),    // 30: nanny.TrafficAssignment
	(*nanny.TargetFn)(nil),             // 31: nanny.TargetFn
}
var file_internal_nanny_controller_controller_proto_depIdxs = []int32{
	26, // 0: controller.RolloutRequest.config:type_name -> config.GKEConfig
	20, // 1: controller.RolloutRequest.locations:type_name -> controller.RolloutRequest.Location
	21, // 2: controller.AppState.versions:type_name -> controller.AppState.VersionsEntry
	26, // 3: controller.AppVersionState.config:type_name -> config.GKEConfig
	6,  // 4: controller.AppVersionState.rollout_strategy:type_name -> controller.RolloutStrategy
	22, // 5: controller.AppVersionState.distributors:type_name -> controller.AppVersionState.DistributorsEntry
	27, // 6: controller.AppVersionState.submission_time:type_name -> google.protobuf.Timestamp
	27, // 7: controller.AppVersionState.time_wave_started:type_name -> google.protobuf.Timestamp
	27, // 8: controller.AppVersionState.time_wave_rolled_out:type_name -> google.protobuf.Timestamp
	0,  // 9: controller.AppVersionDistributorState.status:type_name -> controller.AppVersionDistributorStatus
	28, // 10: controller.AppVersionDistributorState.replica_sets:type_name -> nanny.ReplicaSetState
	7,  // 11: controller.RolloutStrategy.waves:type_name -> controller.RolloutWave
	23, // 12: controller.RolloutWave.target_functions:type_name -> controller.RolloutWave.TargetFunctionsEntry
	29, // 13: controller.RolloutWave.wait_time:type_name -> google.protobuf.Duration
	20, // 14: controller.DistributorState.location:type_name -> controller.RolloutRequest.Location
	30, // 15: controller.DistributorState.traffic_assignment:type_name -> nanny.TrafficAssignment
	24, // 16: controller.ControllerState.applications:type_name -> controller.ControllerState.ApplicationsEntry
	25, // 17: controller.ControllerState.distributors:type_name -> controller.ControllerState.DistributorsEntry
	12, // 18: controller.Status.apps:type_name -> controller.AppStatus
	30, // 19: controller.Status.traffic:type_name -> nanny.TrafficAssignment
	30, // 20: controller.Status.private_traffic:type_name -> nanny.TrafficAssignment
	13, // 21: controller.AppStatus.versions:type_name -> controller.AppVersionStatus
	16, // 22: controller.AppStatus.projected_traffic:type_name -> controller.ProjectedTraffic
	27, // 23: controller.AppVersionStatus.submission_time:type_name -> google.protobuf.Timestamp
	26, // 24: controller.AppVersionStatus.gke_config:type_name -> config.GKEConfig
	1,  // 25: controller.AppVersionStatus.status:type_name -> controller.AppVersionStatus.Status
	14, // 26: controller.AppVersionStatus.replica_sets:type_name -> controller.ReplicaSetStatus
	15, // 27: controller.AppVersionStatus.listeners:type_name -> controller.ListenerStatus
	17, // 28: controller.ProjectedTraffic.projections:type_name -> controller.Projection
	27, // 29: controller.Projection.time:type_name -> google.protobuf.Timestamp
	30, // 30: controller.Projection.traffic:type_name -> nanny.TrafficAssignment
	4,  // 31: controller.AppState.VersionsEntry.value:type_name -> controller.AppVersionState
	5,  // 32: controller.AppVersionState.DistributorsEntry.value:type_name -> controller.AppVersionDistributorState
	31, // 33: controller.RolloutWave.TargetFunctionsEntry.value:type_name -> nanny.TargetFn
	8,  // 34: controller.ControllerState.DistributorsEntry.value:type_name -> controller.DistributorState
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_internal_nanny_controller_controller_proto_init() }
func file_internal_nanny_controller_controller_proto_init() {
	if File_internal_nanny_controller_controller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_nanny_controller_controller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionDistributorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutWave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectedTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Projection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nanny_controller_controller_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutRequest_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_nanny_controller_controller_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_nanny_controller_controller_proto_goTypes,
		DependencyIndexes: file_internal_nanny_controller_controller_proto_depIdxs,
		EnumInfos:         file_internal_nanny_controller_controller_proto_enumTypes,
		MessageInfos:      file_internal_nanny_controller_controller_proto_msgTypes,
	}.Build()
	File_internal_nanny_controller_controller_proto = out.File
	file_internal_nanny_controller_controller_proto_rawDesc = nil
	file_internal_nanny_controller_controller_proto_goTypes = nil
	file_internal_nanny_controller_controller_proto_depIdxs = nil
}
