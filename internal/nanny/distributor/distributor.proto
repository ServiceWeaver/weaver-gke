// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/ServiceWeaver/weaver-gke/internal/nanny/distributor";

package distributor;
import "google/protobuf/timestamp.proto";
import "internal/config/config.proto";
import "internal/nanny/nanny.proto";
import "runtime/protos/runtime.proto";

// AppState contains the state managed for an application by the distributor.
message AppState {
  // Application versions, sorted by submission time.
  repeated AppVersionState versions = 1;

  // Deployment ids of deleted versions.
  repeated string deleted_versions = 3;
}

// AppVersionState contains the state managed for an application version by
// the distributor.
message AppVersionState {
  // Deployment information.
  config.GKEConfig config = 1;

  // Rollout information.
  nanny.Schedule schedule = 2;

  // Unique identifier that captures the order in which the application version
  // was submitted for rollout.
  int64 order = 3;

  // All known groups for this application version.
  nanny.GroupState groups = 4;

  // All known listeners for this application version.
  repeated runtime.Listener listeners = 7;

  enum Status {
    STARTING = 0;  // should be started
    STARTED = 1;   // has started
    STOPPING = 2;  // should be stopped
    STOPPED = 3;   // has been stopped; should be deleted after a delay
  }
  Status status = 5;
  google.protobuf.Timestamp stopped_time = 6;  // when the version was stopped
}

// DistributorState contains the state maintained by the distributor.
message DistributorState {
  // The set of all applications.
  repeated string applications = 1;

  // The latest traffic assignment for public listeners.
  nanny.TrafficAssignment public_traffic_assignment = 2;

  // The latest traffic assignment for private listeners.
  nanny.TrafficAssignment private_traffic_assignment = 4;
}
